
Résumé des parties à lire pour l'itération 1 :

7.1 :

Faire un code mal structuré c'est mal, surtout quand le code devient de plus en plus gros.
Les entreprises qui travaillent et vive d'un logiciel se doivent d'avoir un code bien structuré ou sinon c'est la PLS (Bonne gestion des classes), c'est mieux pour les modifications futures.

zuul-bad , bad parceque mal codé (Mal organisé).

zuul est sensé être un jeu d'aventure(encore incomplet). Zuul est la base de notre projet.

Le fait qu'il soit mal codé nous donnera une idée de ce qu'est un mauvais "class design" afin de ne pas le reproduire.

zuul-better et zuul-bad ont les mêmes fonctionnalités mais pas les mêmes structures de classe avec "bad" et "better" designs.

Le fait que les deux ont les mêmes fonctionnalités ne veut pas dire qu'on arrive pas à le résoudre c'est juste qu'on arrive pas à bien structurer (généralement). On peut pas faire genre "Y'avais pas d'autres moyens".


7.1 :
La simple execution d'une application ne permet pas de déterminer s'il est bien structuré ou non.
Les désaventages d'un code mal structuré surviennent généralement lors de la correction de bugs ou l'ajout de features.
Une modification simple dans un code bien organisé te met en PLS si le code est mal organisé.

Dans une grosse application, les difficultés se présentent dès les premières implémentations.
Les sociétés s'engagent généralement à maintenir à niveau une application durant des années, il est donc primordial d'avoir un code bien écrit.

Il est commun que les sociétés mettent des années à développer un code avant de le diffuser, elles ont donc le temps et l'obligation de le structurer correctement.
Le code zuul-bad permet une bonne compréhension de l'importance de cette structure.
zuul-bad est aussi disponible en zuul-better pour pouvoir comparer deux structures effectuant exactement les mêmes actions via deux qualités de code différents.


7.2 :
Le jeu actuel est plutôt ennuyant. Mais il représente une bonne base pour implémenter notre propre jeu.
le projet compte 5 classes dont la description est indiqué dans le pdf.
Par chance, une petite documentation est présente notemment en entête de chaque classe ce qui permet de mieux comprendre le code.


7.3 :
Pour justifier qu'un designe de classe est mieux qu'un autre, il faut se pencher sur deux aspects : l'interconnection entre les classe, et le degré de difficulté pour effectuer un changement dans le code.
Le degré de couplage correspond aux nombre de changement à faire dans les différentes classes pour la modification d'une classe.
La cohesion est la diversité des tâches pour lesquelles une seule classe de l'application est responsable.
La cohésion influence la qualité du code.


7.4 :
Les répétitions de parties de code est un indice de mauvaise structuration puisqu'il peut causer des bugs dans le cas ou il faut modifier toutes ces répétions de code.
C'est aussi l'effet d'une mauvause cohésion.
Un meilleur designe est une methode séparée et plus cohésive.
Ecrire un même code est a éviter, un même code ne doit être écrit qu'une seule fois.


7.5 :
Le projet zuul-bad peut fonctionner, toutes ces fonctions sont en état de marche.
Malgré celà, il est mal structuré ce qui cause problèmes pour le modifier.
Une alternative bien conçue pourrait être codée, mais la différence ne se verrait pas à l'execution.
Pour se rendre compte de la difficulté d'implémentation, la première tache est d'ajouter une nouvelle direction au mouvement du joueur, il doit à présent pouvoir se déplacer vers le haut et le bas.
