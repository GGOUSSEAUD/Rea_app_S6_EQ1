import java.util.HashMap;/* * This class is the main class of the "World of Zuul" application.  * "World of Zuul" is a very simple, text based adventure game. *  * This class holds an enumeration of all command words known to the game. * It is used to recognise commands as they are typed in. * * @author  Michael Kolling and David J. Barnes * @version 1.0 (February 2002) DBMOD: 04/04/2008 */public class CommandWords{    // a constant array that holds all valid command words    /*private static final String validCommands[] = {        "go", "quit", "help", "back", "test", "take", "drop", "carry", "items", "use"    };*/    private HashMap<String, CommandWord> validCommands;        /**     * Constructor - initialise the command words.     */    public CommandWords()    {        validCommands = new HashMap<String, CommandWord>();        validCommands.put("go", CommandWord.GO);        validCommands.put("help", CommandWord.HELP);        validCommands.put("quit", CommandWord.QUIT);        validCommands.put("back", CommandWord.BACK);        validCommands.put("test", CommandWord.TEST);        validCommands.put("take", CommandWord.TAKE);        validCommands.put("drop", CommandWord.DROP);        validCommands.put("carry", CommandWord.CARRY);        validCommands.put("items", CommandWord.ITEMS);        validCommands.put("use", CommandWord.USE);        validCommands.put("look", CommandWord.LOOK);    }        /**     * Find the CommandWord associated with a command word.     * @param commandWord The word to look up.     * @return The CommandWord correspondng to commandWord, or UNKNOWN     *         if it is not a valid command word.     */    public CommandWord getCommandWord(String commandWord)    {        CommandWord command = validCommands.get(commandWord);        if(command != null) {            return command;        }        else {            return CommandWord.UNKNOWN;        }    }        /**     * Check whether a given String is a valid command word.      * Return true if it is, false if it isn't.     **/    public boolean isCommand(String aString)    {        //for(int i = 0; i < validCommands.length; i++) {        //    if(validCommands[i].equals(aString))        //        return true;        //}        // if we get here, the string was not found in the commands        //return false;        return validCommands.containsKey(aString);    }        /**     * Print all valid commands to System.out.     */    public String showAll()     {                String outCommands = "";        for(String command : validCommands.keySet()) {            outCommands += command + " ";        }        return outCommands;    }        /*     * returns a String of all valid commands.     */    //public String getCommandList()     //{    //    StringBuilder commands = new StringBuilder();    //    for(int i = 0; i < validCommands.length; i++) {    //        commands.append( validCommands[i] + "  " );    //    }    //    return commands.toString();    //}}